View(train)
summary(rf.model)
varImpPlot(rf.model)
# pred <- ifelse(testPred >= 0.5, "SEVERE", "MILD")
# sample = data.frame(Ob=1:15000, SEVERITY=pred)
# write.csv(sample, "sample.csv", row.names = FALSE)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
testPred = predict(rf.model, newdata = test,
type = "class")
# pred <- ifelse(testPred >= 0.5, "SEVERE", "MILD")
sample = data.frame(Ob=1:15000, SEVERITY=testPred)
write.csv(sample, "sample.csv", row.names = FALSE)
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isRushHour+
caution+
wy+
slow+
Side+
interstate,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
# pred <- ifelse(testPred >= 0.5, "SEVERE", "MILD")
# sample = data.frame(Ob=1:15000, SEVERITY=pred)
# write.csv(sample, "sample.csv", row.names = FALSE)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
train$road_closed<-str_detect(train$Description, "closed")
test$road_closed<-str_detect(test$Description, "closed")
set.seed(1128)
train.test.index<-sample(1:nrow(train), 0.3*nrow(train), replace = F)
train.train.data = train[-train.test.index,]
train.test.data = train[train.test.index,]
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isRushHour+
caution+
wy+
slow+
Side+
interstate,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
# pred <- ifelse(testPred >= 0.5, "SEVERE", "MILD")
# sample = data.frame(Ob=1:15000, SEVERITY=pred)
# write.csv(sample, "sample.csv", row.names = FALSE)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
closed = c("road closed", "ramp closed")
train$road_closed<-str_detect(train$Description, closed)
test$road_closed<-str_detect(test$Description, closed)
set.seed(1128)
train.test.index<-sample(1:nrow(train), 0.3*nrow(train), replace = F)
train.train.data = train[-train.test.index,]
train.test.data = train[train.test.index,]
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isRushHour+
caution+
wy+
slow+
Side+
interstate,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
# pred <- ifelse(testPred >= 0.5, "SEVERE", "MILD")
# sample = data.frame(Ob=1:15000, SEVERITY=pred)
# write.csv(sample, "sample.csv", row.names = FALSE)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
train$road_closed<-str_detect(train$Description, "road closed")
test$road_closed<-str_detect(test$Description, "road closed")
train$exit<-str_detect(train$Description, "exit")
test$exit<-str_detect(test$Description, "exit")
set.seed(1128)
train.test.index<-sample(1:nrow(train), 0.3*nrow(train), replace = F)
train.train.data = train[-train.test.index,]
train.test.data = train[train.test.index,]
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isRushHour+
caution+
wy+
slow+
Side+
interstate,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
# pred <- ifelse(testPred >= 0.5, "SEVERE", "MILD")
# sample = data.frame(Ob=1:15000, SEVERITY=pred)
# write.csv(sample, "sample.csv", row.names = FALSE)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isRushHour+
caution+
wy+
slow+
interstate,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
# pred <- ifelse(testPred >= 0.5, "SEVERE", "MILD")
# sample = data.frame(Ob=1:15000, SEVERITY=pred)
# write.csv(sample, "sample.csv", row.names = FALSE)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isRushHour+
caution+
exit+
wy+
slow+
interstate,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
# pred <- ifelse(testPred >= 0.5, "SEVERE", "MILD")
# sample = data.frame(Ob=1:15000, SEVERITY=pred)
# write.csv(sample, "sample.csv", row.names = FALSE)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
test <- read.csv("AcctestNoYNew.csv")
train <- read.csv("Acctrain.csv")
sapply(as.data.frame(is.na(train)), sum)
train$Temperature.F.[is.na(train$Temperature.F.)] <- mean(train$Temperature.F.[!is.na(train$Temperature.F.)])
train$Wind_Chill.F.[is.na(train$Wind_Chill.F.)] <- mean(train$Wind_Chill.F.[!is.na(train$Wind_Chill.F.)])
train$Pressure.in.[is.na(train$Pressure.in.)] <- mean(train$Pressure.in.[!is.na(train$Pressure.in.)])
train$Visibility.mi.[is.na(train$Visibility.mi.)] <- mean(train$Visibility.mi.[!is.na(train$Visibility.mi.)])
train$Wind_Speed.mph.[is.na(train$Wind_Speed.mph.)] <- mean(train$Wind_Speed.mph.[!is.na(train$Wind_Speed.mph.)])
# model1 <- glm(as.factor(Severity)~Start_Lat+Start_Lng+End_Lat+End_Lng+Temperature.F.+Wind_Chill.F.+Pressure.in.+Visibility.mi.+Wind_Speed.mph., family = binomial(), data = train)
sapply(as.data.frame(is.na(test)), sum)
test$Temperature.F.[is.na(test$Temperature.F.)] <- mean(test$Temperature.F.[!is.na(test$Temperature.F.)])
test$Wind_Chill.F.[is.na(test$Wind_Chill.F.)] <- mean(test$Wind_Chill.F.[!is.na(test$Wind_Chill.F.)])
test$Pressure.in.[is.na(test$Pressure.in.)] <- mean(test$Pressure.in.[!is.na(test$Pressure.in.)])
test$Visibility.mi.[is.na(test$Visibility.mi.)] <- mean(test$Visibility.mi.[!is.na(test$Visibility.mi.)])
test$Wind_Speed.mph.[is.na(test$Wind_Speed.mph.)] <- mean(test$Wind_Speed.mph.[!is.na(test$Wind_Speed.mph.)])
# testPred <- predict(model1, test, type="response")
# pred <- ifelse(testPred >= 0.5, "SEVERE", "MILD")
#sample <- cbind(Sample[1], pred)
#names(sample) <- c("Ob", "SEVERITY")
#write.csv(sample, "sample.csv", row.names = FALSE)
# summary(model1)
# trainPred <- predict(model1, type="response")
# predTrain <- ifelse(trainPred >= 0.5, "SEVERE", "MILD")
# table(train$Severity, predTrain)
# mean(train$Severity == predTrain)
library(stringr)
library(lubridate)
train$duration<-as.numeric(as.POSIXct(train$End_Time,
format = "%Y-%m-%dT%H:%M"))-
as.numeric(as.POSIXct(train$Start_Time,
format = "%Y-%m-%dT%H:%M"))
test$duration<-as.numeric(as.POSIXct(test$End_Time,
format = "%Y-%m-%dT%H:%M"))-
as.numeric(as.POSIXct(test$Start_Time,
format = "%Y-%m-%dT%H:%M"))
train$time = ymd_hms(train$Start_Time)
test$time = ymd_hms(test$Start_Time)
train$hour=hour(train$time)
test$hour=hour(test$time)
train$year = year(train$time)
test$year = year(test$time)
train$isRushHour = train$hour %in% c(7,8,17,18)
test$isRushHour = test$hour %in% c(7,8,17,18)
train$Description = tolower(train$Description)
test$Description = tolower(test$Description)
train$road_closed<-str_detect(train$Description, "road closed")
test$road_closed<-str_detect(test$Description, "road closed")
train$exit<-str_detect(train$Description, "exit")
test$exit<-str_detect(test$Description, "exit")
train$ramp_str<-str_detect(train$Description, "ramp")
test$ramp_str<-str_detect(test$Description, "ramp")
train$slow<-str_detect(train$Description, "slow")
test$slow<-str_detect(test$Description, "slow")
train$caution<-str_detect(train$Description, "caution")
test$caution<-str_detect(test$Description, "caution")
train$interstate<-str_detect(train$Description, "i-")
test$interstate<-str_detect(test$Description, "i-")
wy = c("fwy", "pkwy")
train$wy<-str_detect(train$Description, wy)
test$wy<-str_detect(test$Description, wy)
# ggplot(aes(x = as.factor(Severity),
#            y = duration), data = accTrain) +
#   geom_boxplot()
# train$weekday = weekdays(accTrain$Start_Time)
train$isWeekend = weekdays(as.POSIXct(train$Start_Time)) %in% c("Saturday",
"Sunday")
train$isWeekend = ifelse(train$isWeekend==TRUE, 1, 0)
test$isWeekend = weekdays(as.POSIXct(test$Start_Time)) %in% c("Saturday",
"Sunday")
test$isWeekend = ifelse(test$isWeekend==TRUE, 1, 0)
train$Bump = ifelse(train$Bump == TRUE, 1, 0)
train$Give_Way = ifelse(train$Give_Way == TRUE, 1, 0)
train$No_Exit = ifelse(train$No_Exit == TRUE, 1, 0)
train$Roundabout = ifelse(train$Roundabout == TRUE, 1, 0)
train$Traffic_Calming = ifelse(train$Traffic_Calming == TRUE, 1, 0)
train$Turning_Loop = ifelse(train$Turning_Loop==TRUE, 1, 0)
test$Bump = ifelse(test$Bump == TRUE, 1, 0)
test$Give_Way = ifelse(test$Give_Way == TRUE, 1, 0)
test$No_Exit = ifelse(test$No_Exit == TRUE, 1, 0)
test$Roundabout = ifelse(test$Roundabout == TRUE, 1, 0)
test$Traffic_Calming = ifelse(test$Traffic_Calming == TRUE, 1, 0)
test$Turning_Loop = ifelse(test$Turning_Loop==TRUE, 1, 0)
sapply(as.data.frame(is.na(train)), sum)
train$Temperature.F.[is.na(train$Temperature.F.)] <- median(train$Temperature.F.[!is.na(train$Temperature.F.)])
train$Wind_Chill.F.[is.na(train$Wind_Chill.F.)] <- median(train$Wind_Chill.F.[!is.na(train$Wind_Chill.F.)])
train$Pressure.in.[is.na(train$Pressure.in.)] <- median(train$Pressure.in.[!is.na(train$Pressure.in.)])
train$Visibility.mi.[is.na(train$Visibility.mi.)] <- median(train$Visibility.mi.[!is.na(train$Visibility.mi.)])
train$Wind_Speed.mph.[is.na(train$Wind_Speed.mph.)] <- median(train$Wind_Speed.mph.[!is.na(train$Wind_Speed.mph.)])
# library(class)
#
# train.test.X = train[train.test.index, c(20, 21, 23,24, 26,29,31,33,35,38,40,45,46)]
# train.train.X = train[-train.test.index, c(20, 21, 23,24, 26,29,31,33,35,38,40,45,46)]
# train.test.Y = train[train.test.index, 1]
# train.train.Y = train[-train.test.index, 1]
#
# train.train = cbind(train.train.Y, train.train.X)
#
# knn.model<-knn(train.train.X,train.test.X,train.train.Y,k=9)
# #
# table(knn.model,train.test.Y)
# #
# mean(knn.model==train.test.Y)
#
# train.train = train[-train.test.index, c(20, 21, 23,24, 26,45,46)]
# train.train$Severity = train[-train.test.index, 1]
#
# train.test = train[train.test.index, c(20, 21, 23,24, 26,45,46)]
# train.test$Severity = train[train.test.index, 1]
# model1 <- glm(as.factor(Severity)~Temperature.F.+
#                 Wind_Chill.F.+
#                 Pressure.in.+
#                 Visibility.mi.+
#                 Wind_Speed.mph.+
#                 duration+
#                 isWeekend+Bump+
#                 Give_Way+
#                 No_Exit+
#                 Roundabout+
#                 Traffic_Calming+Turning_Loop, family = binomial(), data = train)
sapply(as.data.frame(is.na(test)), sum)
test$Temperature.F.[is.na(test$Temperature.F.)] <- median(test$Temperature.F.[!is.na(test$Temperature.F.)])
test$Wind_Chill.F.[is.na(test$Wind_Chill.F.)] <- median(test$Wind_Chill.F.[!is.na(test$Wind_Chill.F.)])
test$Pressure.in.[is.na(test$Pressure.in.)] <- median(test$Pressure.in.[!is.na(test$Pressure.in.)])
test$Visibility.mi.[is.na(test$Visibility.mi.)] <- median(test$Visibility.mi.[!is.na(test$Visibility.mi.)])
test$Wind_Speed.mph.[is.na(test$Wind_Speed.mph.)] <- median(test$Wind_Speed.mph.[!is.na(test$Wind_Speed.mph.)])
# testPred <- predict(model1, test, type="response")
# pred <- ifelse(testPred >= 0.5, "SEVERE", "MILD")
# sample = data.frame(Ob=1:15000, SEVERITY=pred)
# write.csv(sample, "sample.csv", row.names = FALSE)
View(train)
train$isHighRiskState<-train$State %in%
high.risk.states
high.risk.states = c("MT","ND","MS","WY",
"SD","TX","NM","OK",
"ID","SC")
train$isHighRiskState<-train$State %in%
high.risk.states
test$isHighRiskState<-test$State %in%
high.risk.states
set.seed(1128)
train.test.index<-sample(1:nrow(train), 0.3*nrow(train), replace = F)
train.train.data = train[-train.test.index,]
train.test.data = train[train.test.index,]
library(tree)
install.packages("tree")
library(tree)
tree.model = tree(as.factor(Severity) ~
road_closed+
duration+
isRushHour+
isHighRiskState
caution+
library(tree)
tree.model = tree(as.factor(Severity) ~
road_closed+
duration+
isRushHour+
isHighRiskState+
caution+
interstate,
train.train.data)
summary(tree.model)
# pred <- ifelse(testPred >= 0.5, "SEVERE", "MILD")
# sample = data.frame(Ob=1:15000, SEVERITY=pred)
# write.csv(sample, "sample.csv", row.names = FALSE)
train.test.pred = predict(tree.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
misclassified.index = which(train.test.pred=="MILD" & train.test.data$Severity=="SEVERE")
misclass.data = train.test.data[misclassified.index,]
write.csv(misclass.data$Description,
"mis_desc.csv", row.names = FALSE)
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isRushHour+
caution+
exit+
wy+
slow+
interstate,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
# pred <- ifelse(testPred >= 0.5, "SEVERE", "MILD")
# sample = data.frame(Ob=1:15000, SEVERITY=pred)
# write.csv(sample, "sample.csv", row.names = FALSE)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isRushHour+
caution+
exit+
wy+
slow+
isHighRiskState+
interstate,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
# pred <- ifelse(testPred >= 0.5, "SEVERE", "MILD")
# sample = data.frame(Ob=1:15000, SEVERITY=pred)
# write.csv(sample, "sample.csv", row.names = FALSE)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
misclassified.index = which(train.test.pred=="MILD" & train.test.data$Severity=="SEVERE")
misclass.data = train.test.data[misclassified.index,]
View(misclass.data)
summary(misclass.data)
library(tree)
tree.model = tree(as.factor(Severity) ~
road_closed+
duration+
isRushHour+
isHighRiskState+
caution+
exit+
interstate,
train.train.data)
summary(tree.model)
# pred <- ifelse(testPred >= 0.5, "SEVERE", "MILD")
# sample = data.frame(Ob=1:15000, SEVERITY=pred)
# write.csv(sample, "sample.csv", row.names = FALSE)
train.test.pred = predict(tree.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
misclassified.index = which(train.test.pred=="MILD" & train.test.data$Severity=="SEVERE")
misclass.data = train.test.data[misclassified.index,]
write.csv(misclass.data$Description,
"mis_desc.csv", row.names = FALSE)
library(tree)
tree.model = tree(as.factor(Severity) ~
road_closed+
duration+
exit+
interstate,
train.train.data)
summary(tree.model)
# pred <- ifelse(testPred >= 0.5, "SEVERE", "MILD")
# sample = data.frame(Ob=1:15000, SEVERITY=pred)
# write.csv(sample, "sample.csv", row.names = FALSE)
train.test.pred = predict(tree.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
misclassified.index = which(train.test.pred=="MILD" & train.test.data$Severity=="SEVERE")
misclass.data = train.test.data[misclassified.index,]
write.csv(misclass.data$Description,
"mis_desc.csv", row.names = FALSE)
misclass.data$Description[0]
misclass.data$Description
misclass.data$Description[[1]]
length(misclass.data$Description[[1]])
nchar(misclass.data$Description[[1]])
train$DescriptionLen = nchar(train$Description)
test$DescriptionLen = nchar(test$Description)
set.seed(1128)
train.test.index<-sample(1:nrow(train), 0.3*nrow(train), replace = F)
train.train.data = train[-train.test.index,]
train.test.data = train[train.test.index,]
library(tree)
tree.model = tree(as.factor(Severity) ~
road_closed+
duration+
exit+
DescriptionLen+
interstate,
train.train.data)
summary(tree.model)
# pred <- ifelse(testPred >= 0.5, "SEVERE", "MILD")
# sample = data.frame(Ob=1:15000, SEVERITY=pred)
# write.csv(sample, "sample.csv", row.names = FALSE)
train.test.pred = predict(tree.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
misclassified.index = which(train.test.pred=="MILD" & train.test.data$Severity=="SEVERE")
misclass.data = train.test.data[misclassified.index,]
write.csv(misclass.data$Description,
"mis_desc.csv", row.names = FALSE)
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isRushHour+
caution+
exit+
wy+
slow+
DescriptionLen+
isHighRiskState+
interstate,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
# pred <- ifelse(testPred >= 0.5, "SEVERE", "MILD")
# sample = data.frame(Ob=1:15000, SEVERITY=pred)
# write.csv(sample, "sample.csv", row.names = FALSE)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isRushHour+
caution+
exit+
wy+
slow+
DescriptionLen+
isHighRiskState+
interstate,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
pred <- ifelse(testPred >= 0.5, "SEVERE", "MILD")
testPred = predict(rf.model, newdata = test,
type = "class")
# pred <- ifelse(testPred >= 0.5, "SEVERE", "MILD")
sample = data.frame(Ob=1:15000, SEVERITY=testPred)
write.csv(sample, "sample.csv", row.names = FALSE)
