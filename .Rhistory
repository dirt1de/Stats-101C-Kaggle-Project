isLargeCity,
train.train.data)
summary(tree.model)
# pred <- ifelse(testPred >= 0.5, "SEVERE", "MILD")
# sample = data.frame(Ob=1:15000, SEVERITY=pred)
# write.csv(sample, "sample.csv", row.names = FALSE)
train.test.pred = predict(tree.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
misclassified.index = which(train.test.pred=="MILD" & train.test.data$Severity=="SEVERE")
misclass.data = train.test.data[misclassified.index,]
write.csv(misclass.data,
"misclassified_data.csv", row.names = FALSE)
misclass.data%>%
group_by(State)%>%
summarise(proportion = n()/650)%>%
arrange(desc(proportion))
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
hour+
month+
year+
County+
,
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
hour+
month+
year+
County
,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
Distance.mi.+
DescriptionLen+
isHighRiskState+
hour+
month+
year+
County
,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
hour+
month+
year+
County
,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
testPred = predict(rf.model, newdata = test,
type = "class")
# pred <- ifelse(testPred >= 0.5, "SEVERE", "MILD")
sample = data.frame(Ob=1:15000, SEVERITY=testPred)
write.csv(sample, "sample.csv", row.names = FALSE)
gst
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
Distance.mi.+
DescriptionLen+
isHighRiskState+
hour+
month+
year+
County
,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
hour+
month+
year+
County
,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
caution+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
hour+
month+
year+
County+
,
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
caution+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
hour+
month+
year+
County,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
interstate+
hour+
month+
year+
County+
,
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
interstate+
hour+
month+
year+
County,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
hour+
month+
year+
County,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
slow+
DescriptionLen+
isHighRiskState+
hour+
month+
year+
County,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
isRushHour+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
hour+
month+
year+
County,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
wy+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
hour+
month+
year+
County,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
hour+
month+
year+
County,
data = train.train.data)
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
hour+
month+
year+
County,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
unique(train$year)
typeof(train$year)
covid.years = c(2019,2020,2021)
train$isCovidYears<-train$year %in%
covid.years
View(train)
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
Distance.mi.+
slow+
isCovidYears+
DescriptionLen+
isHighRiskState+
hour+
month+
year+
County,
data = train.train.data)
set.seed(1128)
train.test.index<-sample(1:nrow(train), 0.3*nrow(train), replace = F)
train.train.data = train[-train.test.index,]
train.test.data = train[train.test.index,]
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
Distance.mi.+
slow+
isCovidYears+
DescriptionLen+
isHighRiskState+
hour+
month+
year+
County,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
Distance.mi.+
slow+
isCovidYears+
DescriptionLen+
isHighRiskState+
hour+
month+
County,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
hour+
month+
year+
County,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
library(tree)
tree.model = tree(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
hour+
month+
year+
County,
train.train.data)
summary(tree.model)
# pred <- ifelse(testPred >= 0.5, "SEVERE", "MILD")
# sample = data.frame(Ob=1:15000, SEVERITY=pred)
# write.csv(sample, "sample.csv", row.names = FALSE)
train.test.pred = predict(tree.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
misclassified.index = which(train.test.pred=="MILD" & train.test.data$Severity=="SEVERE")
misclass.data = train.test.data[misclassified.index,]
write.csv(misclass.data,
"misclassified_data.csv", row.names = FALSE)
misclass.data%>%
group_by(State)%>%
summarise(proportion = n()/650)%>%
arrange(desc(proportion))
library(tree)
tree.model = tree(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
hour+
month+
year+
County,
train.train.data)
summary(tree.model)
# pred <- ifelse(testPred >= 0.5, "SEVERE", "MILD")
# sample = data.frame(Ob=1:15000, SEVERITY=pred)
# write.csv(sample, "sample.csv", row.names = FALSE)
train.test.pred = predict(tree.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
# misclassified.in dex = which(train.test.pred=="MILD" & train.test.data$Severity=="SEVERE")
# misclass.data = train.test.data[misclassified.index,]
# write.csv(misclass.data,
#           "misclassified_data.csv", row.names = FALSE)
# misclass.data%>%
#   group_by(State)%>%
#   summarise(proportion = n()/650)%>%
#   arrange(desc(proportion))
# write.csv(misclass.data$Description,
#           "mis_desc.csv", row.names = FALSE)
