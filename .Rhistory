Side
# Amenity
,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
View(train)
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
isRushHour+
caution+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
interstate+
Junction+
Sunrise_Sunset
# Amenity
,
data = train.train.data)
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
isRushHour+
caution+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
interstate+
Junction+
hour
,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
caution+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
interstate+
Junction+
hour
,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
train$month=month(train$time)
test$month=month(test$time)
set.seed(1128)
train.test.index<-sample(1:nrow(train), 0.3*nrow(train), replace = F)
train.train.data = train[-train.test.index,]
train.test.data = train[train.test.index,]
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
caution+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
interstate+
Junction+
hour+
month
,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
glm.model <- glm(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
caution+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
interstate+
Junction+
hour+
month,
family = binomial(), data = train.train.data)
summary(glm.model)
glm.predict <- predict(glm.model, train.test.data,
type="response")
predTrain <- ifelse(glm.predict >= 0.3, "SEVERE", "MILD")
table(train.test.data$Severity, predTrain)
mean(train.test.data$Severity != predTrain)
# pred <- ifelse(testPred >= 0.5, "SEVERE", "MILD")
# sample = data.frame(Ob=1:15000, SEVERITY=pred)
# write.csv(sample, "sample.csv", row.names = FALSE)
# train.test.pred = predict(glm.model, newdata = train.test.data,type = "class")
# table(train.test.pred, train.test.data$Severity)
# tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
# tree.mis.rate
predTrain <- ifelse(glm.predict >= 0.5, "SEVERE", "MILD")
table(train.test.data$Severity, predTrain)
mean(train.test.data$Severity != predTrain)
predTrain <- ifelse(glm.predict >= 0.6, "SEVERE", "MILD")
table(train.test.data$Severity, predTrain)
mean(train.test.data$Severity != predTrain)
predTrain <- ifelse(glm.predict >= 0.4, "SEVERE", "MILD")
table(train.test.data$Severity, predTrain)
mean(train.test.data$Severity != predTrain)
predTrain <- ifelse(glm.predict >= 0.35, "SEVERE", "MILD")
table(train.test.data$Severity, predTrain)
mean(train.test.data$Severity != predTrain)
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
caution+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
interstate+
Junction+
hour+
month+
County
,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
caution+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
interstate+
Junction+
hour+
month+
City
,
data = train.train.data)
sum(is.na(train$City))
# sapply(as.data.frame(is.na(train)), sum)
train$Temperature.F.[is.na(train$Temperature.F.)] <- mean(train$Temperature.F.[!is.na(train$Temperature.F.)])
train$Wind_Chill.F.[is.na(train$Wind_Chill.F.)] <- mean(train$Wind_Chill.F.[!is.na(train$Wind_Chill.F.)])
train$Pressure.in.[is.na(train$Pressure.in.)] <- mean(train$Pressure.in.[!is.na(train$Pressure.in.)])
train$Visibility.mi.[is.na(train$Visibility.mi.)] <- mean(train$Visibility.mi.[!is.na(train$Visibility.mi.)])
train$Wind_Speed.mph.[is.na(train$Wind_Speed.mph.)] <- mean(train$Wind_Speed.mph.[!is.na(train$Wind_Speed.mph.)])
train$City[is.na(train$City)] =
mode(train$City[!is.na(train$City)])
# model1 <- glm(as.factor(Severity)~Start_Lat+Start_Lng+End_Lat+End_Lng+Temperature.F.+Wind_Chill.F.+Pressure.in.+Visibility.mi.+Wind_Speed.mph., family = binomial(), data = train)
# sapply(as.data.frame(is.na(test)), sum)
test$Temperature.F.[is.na(test$Temperature.F.)] <- mean(test$Temperature.F.[!is.na(test$Temperature.F.)])
test$Wind_Chill.F.[is.na(test$Wind_Chill.F.)] <- mean(test$Wind_Chill.F.[!is.na(test$Wind_Chill.F.)])
test$Pressure.in.[is.na(test$Pressure.in.)] <- mean(test$Pressure.in.[!is.na(test$Pressure.in.)])
test$Visibility.mi.[is.na(test$Visibility.mi.)] <- mean(test$Visibility.mi.[!is.na(test$Visibility.mi.)])
test$Wind_Speed.mph.[is.na(test$Wind_Speed.mph.)] <- mean(test$Wind_Speed.mph.[!is.na(test$Wind_Speed.mph.)])
test$City[is.na(test$City)] =
mode(test$City[!is.na(test$City)])
# testPred <- predict(model1, test, type="response")
# pred <- ifelse(testPred >= 0.5, "SEVERE", "MILD")
#sample <- cbind(Sample[1], pred)
#names(sample) <- c("Ob", "SEVERITY")
#write.csv(sample, "sample.csv", row.names = FALSE)
set.seed(1128)
train.test.index<-sample(1:nrow(train), 0.3*nrow(train), replace = F)
train.train.data = train[-train.test.index,]
train.test.data = train[train.test.index,]
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
caution+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
interstate+
Junction+
hour+
month+
City
,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
caution+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
interstate+
Junction+
hour+
month+
City+
County
,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
caution+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
interstate+
Junction+
hour+
month+
County
,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
caution+
Distance.mi.+
slow+
DescriptionLen+
interstate+
hour+
month+
County
,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
caution+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
interstate+
hour+
month+
County
,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
interstate+
hour+
month+
County
,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
caution+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
interstate+
hour+
month+
County
,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
caution+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
interstate+
hour+
month+
County
,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
caution+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
interstate+
hour+
month+
County
,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
caution+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
interstate+
hour+
month+
County+
isRushHour
,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
caution+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
interstate+
hour+
month+
County
,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
testPred = predict(rf.model, newdata = test,
type = "class")
# pred <- ifelse(testPred >= 0.5, "SEVERE", "MILD")
sample = data.frame(Ob=1:15000, SEVERITY=testPred)
write.csv(sample, "sample.csv", row.names = FALSE)
set.seed(123)
library(randomForest)
rf.model = randomForest(as.factor(Severity) ~
road_closed+
duration+
isWeekend+
caution+
Distance.mi.+
slow+
DescriptionLen+
isHighRiskState+
interstate+
hour+
month+
County+
Visibility.mi.
,
data = train.train.data)
summary(rf.model)
varImpPlot(rf.model)
train.test.pred = predict(rf.model, newdata = train.test.data,
type = "class")
table(train.test.pred, train.test.data$Severity)
tree.mis.rate=mean(train.test.pred!=train.test.data$Severity)
tree.mis.rate
